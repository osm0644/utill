public class ConcurrentPuzzleSolver<P, M> {
    private final Puzzle<P, M> puzzle;
    private final ExecutorService exec; //스레드 풀 내부의 작업 큐를 사용한다???? 어디인가요?
    private final ConcurrentHashMap<P, Boolean> seen; // putIfAbsent 및 안정성 확보, 경쟁 상황 예방 위해 ConcurrentHashMap 사용
    final ValueLatch<Node<P, M>> solution = new ValueLatch<Node<P, M>>();

    public ConcurrentPuzzleSolver(Puzzle<P, M> puzzle, ExecutorService exec, ConcurrentHashMap<P, Boolean> seen) {
        this.puzzle = puzzle;
        this.exec = exec;
        this.seen = seen;
    }
    
    public List<M> solve() throws InterruptedException {
        try {
            P p = puzzle.initailPosition();
            exec.execute(newTask(p, null, null));
            // 최종 결과를 찾을 때까지 대기
            Node<P, M> solnNode = solution.getValue();
            return (solnNode == null) ? null : solnNode.asMoveList();
        } finally {
            exec.shutdown(); //- 최종 결과를 가장 먼저 찾아낸 스레드는 Executor를 종료시켜 더 이상의 작업이 등록되지 않도록 막는다.
        }
    }
    
    protected Runnable newTask(P p, M m, Node<P, M> n) {
        return new SolverTask(p, m, n);
    }
    
    class SolverTask extends Node<P, M> implements Runnable { // Node 클래스를 상속받고 Runnable 인터페이스를 구현함

        SolverTask(P pos, M move, Node<P, M> prev) {
            super(pos, move, prev);
        }

        @Override
        public void run() {
            if(solution.isSet() || seen.putIfAbsent(pos, true) != null) { // 이미 가봤던 위치를 확인해 이동 대상에서 제외하는 작업
                return;
            }
            
            if(puzzle.isGoal(pos)) { // 목표한 위치에 도달했는지를 확인하는 작업
                solution.setValue(this);
            } else {
                for(M m : puzzle.legalMoves(pos)) { //이동할 수 있는 다음 위치를 찾는 작업
                    exec.execute(newTask(puzzle.move(pos, m), m, this)); //이동해야 할 대상 위치를 Executor에 넘겨주는 작업 
                }
            }
        }
    }
}


@ThreadSafe
public class ValueLatch<T> {
    @GuardedBy("this") private T value = null;
    private final CountDownLatch done = new CountDownLatch(1); // 필요로 하는 래치 기능을 구현

    public boolean isSet() {
        return (done.getCount() == 0);
    }

    public synchronized void setValue(T newValue) {
        if(!isSet()) {
            value = newValue;
            done.countDown(); //카운트가 하나 낮아지고 
        }
    }

    public T getValue() throws InterruptedException { //호출하고 기다리던 메인 스레드가 대기 상태에서 풀려난다.
        done.await(); // 
        synchronized (this) {
            return value; // 락을 적절히 사용해 결과를 단 한번만 설정할 수 있도록 설정 , 
        }
    }
}



public class PuzzleSolver<P, M> extends ConcurrentPuzzleSolver<P, M> {
    public PuzzleSolver(Puzzle<P, M> puzzle, ExecutorService exec, ConcurrentHashMap<P, Boolean> seen) {
        super(puzzle, exec, seen);
    }
    
    private final AtomicInteger taskCount = new AtomicInteger(0);
    
    protected Runnable newTask(P p, M m, Node<P, M> n) {
        return new CountingSolverTask(p, m, n);
    }
    
    class CountingSolverTask extends SolverTask {
        CountingSolverTask(P pos, M move, Node<P, M> prev) {
            super(pos, move, prev);
            taskCount.incrementAndGet();
        }

        @Override
        public void run() {
            try {
                super.run();
            } finally {
                if(taskCount.decrementAndGet() == 0) {
                    solution.setValue(null);
                }
            }
        }
    }
}
